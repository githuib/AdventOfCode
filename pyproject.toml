[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.poetry.scripts]
solve = "aoc.cli:main"

[tool.poetry]
name = "advent-of-code"
version = "1.33.7"
description = "Advent of Code"
authors = []
packages = [{ include = "aoc", from = "src" }]

[tool.poetry.dependencies]
python = "^3.13"
cairocffi = "*"
igraph = "*"
matplotlib = "*"
more_itertools = "*"
#numpy = "*"
parse = "*"
#sympy = "*"
yachalk = "*"

[tool.poetry.group.typing.dependencies]
matplotlib-stubs = "*"

[tool.poetry.group.qa.dependencies]
mypy = "*"
pytest = "*"
ruff = "*"

[tool.mypy]
files = ["src", "tests"]
implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true

[tool.ruff]
indent-width = 4
line-length = 120
target-version = "py313"

[tool.ruff.lint]
select = [
    "F", # Pyflakes
    "E", # pycodestyle
    "E", # pycodestyle
    "C90", # mccabe
    "I", # isort
    "N", # pep8-naming
#    "D", # pydocstyle
    "UP", # pyupgrade
    "YTT", # flake8-2020
#    "ANN", # flake8-annotations
    "ASYNC", # flake8-async
#    "TRIO", # flake8-trio
    "S", # flake8-bandit
    "BLE", # flake8-blind-except
#    "FBT", # flake8-boolean-trap
    "B", # flake8-bugbear
    "A", # flake8-builtins
    "COM", # flake8-commas
#    "CPY", # flake8-copyright
    "C4", # flake8-comprehensions
    "DTZ", # flake8-datetimez
    "T10", # flake8-debugger
    "DJ", # flake8-django
    "EM", # flake8-errmsg
    "EXE", # flake8-executable
    "FA", # flake8-future-annotations
    "ISC", # flake8-implicit-str-concat
    "ICN", # flake8-import-conventions
    "G", # flake8-logging-format
    "INP", # flake8-no-pep420
    "PIE", # flake8-pie
    "T20", # flake8-print
    "PYI", # flake8-pyi
    "PT", # flake8-pytest-style
    "Q", # flake8-quotes
    "RSE", # flake8-raise
    "RET", # flake8-return
    "SLF", # flake8-self
    "SLOT", # flake8-slots
    "SIM", # flake8-simplify
    "TID", # flake8-tidy-imports
    "TCH", # flake8-type-checking
    "INT", # flake8-gettext
    "ARG", # flake8-unused-arguments
    "PTH", # flake8-use-pathlib
#    "TD", # flake8-todos
#    "FIX", # flake8-fixme
#    "ERA", # eradicate
    "PD", # pandas-vet
    "PGH", # pygrep-hooks
    "PL", # Pylint
    "TRY", # tryceratops
    "FLY", # flynt
    "NPY", # NumPy-specific rules
    "AIR", # Airflow
    "PERF", # Perflint
#    "FURB", # refurb
    "LOG", # flake8-logging
    "RUF", # Ruff-specific rules
]
ignore = [
    "T201", # `print` found
    "E501", # Line too long
    "G004", # Logging statement uses f-string
    "S101", # Use of `assert` detected
    "PLR2004", # Magic value used in comparison
    "RUF013", # PEP 484 prohibits implicit `Optional`
#    "TRY", # tryceratops
#    "EM", # flake8-errmsg
#    "S101",
#    "ARG001",
#    "ARG002",
]

[tool.ruff.lint.per-file-ignores]
"tests/**/*" = [
    "C901", #too complex
]
